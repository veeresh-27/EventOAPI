// <auto-generated />
using System;
using EventOAPI.Tables;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventOAPI.Migrations
{
    [DbContext(typeof(EventDB))]
    [Migration("20230605100550_v2")]
    partial class v2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventOAPI.Tables.ChatTable", b =>
                {
                    b.Property<int>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChatId"));

                    b.Property<int>("ChatType")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ChatId");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("ChatTable");
                });

            modelBuilder.Entity("EventOAPI.Tables.CommunityTable", b =>
                {
                    b.Property<int>("CommunityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommunityId"));

                    b.Property<int>("CommunityCreatorUserId")
                        .HasColumnType("int");

                    b.Property<string>("CommunityDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommunityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommunityId");

                    b.HasIndex("CommunityCreatorUserId");

                    b.ToTable("CommunityTable");
                });

            modelBuilder.Entity("EventOAPI.Tables.EventTable", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<int>("CommunityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpaceSapaceId")
                        .HasColumnType("int");

                    b.HasKey("EventId");

                    b.HasIndex("CommunityId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("SpaceSapaceId");

                    b.ToTable("EventTable");
                });

            modelBuilder.Entity("EventOAPI.Tables.ImageTable", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"));

                    b.Property<int?>("CommunityTableCommunityId")
                        .HasColumnType("int");

                    b.Property<int?>("EventTableEventId")
                        .HasColumnType("int");

                    b.Property<string>("ImageLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SpaceTableSapaceId")
                        .HasColumnType("int");

                    b.HasKey("ImageId");

                    b.HasIndex("CommunityTableCommunityId");

                    b.HasIndex("EventTableEventId");

                    b.HasIndex("SpaceTableSapaceId");

                    b.ToTable("ImageTable");
                });

            modelBuilder.Entity("EventOAPI.Tables.OwnerTable", b =>
                {
                    b.Property<int>("OwnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OwnerId"));

                    b.Property<string>("OwnerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerPicImageId")
                        .HasColumnType("int");

                    b.HasKey("OwnerId");

                    b.HasIndex("OwnerPicImageId");

                    b.ToTable("OwnerTable");
                });

            modelBuilder.Entity("EventOAPI.Tables.SpaceTable", b =>
                {
                    b.Property<int>("SapaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SapaceId"));

                    b.Property<int>("CreatorUserId")
                        .HasColumnType("int");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("SpaceLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpaceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SapaceId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("OwnerId");

                    b.ToTable("SpaceTable");
                });

            modelBuilder.Entity("EventOAPI.Tables.UserTable", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int?>("CommunityTableCommunityId")
                        .HasColumnType("int");

                    b.Property<int?>("EventTableEventId")
                        .HasColumnType("int");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserPicImageId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("CommunityTableCommunityId");

                    b.HasIndex("EventTableEventId");

                    b.HasIndex("UserPicImageId");

                    b.ToTable("UserTable");
                });

            modelBuilder.Entity("EventOAPI.Tables.ChatTable", b =>
                {
                    b.HasOne("EventOAPI.Tables.EventTable", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventOAPI.Tables.UserTable", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventOAPI.Tables.CommunityTable", b =>
                {
                    b.HasOne("EventOAPI.Tables.UserTable", "CommunityCreator")
                        .WithMany()
                        .HasForeignKey("CommunityCreatorUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommunityCreator");
                });

            modelBuilder.Entity("EventOAPI.Tables.EventTable", b =>
                {
                    b.HasOne("EventOAPI.Tables.CommunityTable", "Community")
                        .WithMany()
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventOAPI.Tables.UserTable", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventOAPI.Tables.SpaceTable", "Space")
                        .WithMany()
                        .HasForeignKey("SpaceSapaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Community");

                    b.Navigation("Creator");

                    b.Navigation("Space");
                });

            modelBuilder.Entity("EventOAPI.Tables.ImageTable", b =>
                {
                    b.HasOne("EventOAPI.Tables.CommunityTable", null)
                        .WithMany("CommunityImages")
                        .HasForeignKey("CommunityTableCommunityId");

                    b.HasOne("EventOAPI.Tables.EventTable", null)
                        .WithMany("EventImages")
                        .HasForeignKey("EventTableEventId");

                    b.HasOne("EventOAPI.Tables.SpaceTable", null)
                        .WithMany("SpaceImages")
                        .HasForeignKey("SpaceTableSapaceId");
                });

            modelBuilder.Entity("EventOAPI.Tables.OwnerTable", b =>
                {
                    b.HasOne("EventOAPI.Tables.ImageTable", "OwnerPic")
                        .WithMany()
                        .HasForeignKey("OwnerPicImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OwnerPic");
                });

            modelBuilder.Entity("EventOAPI.Tables.SpaceTable", b =>
                {
                    b.HasOne("EventOAPI.Tables.UserTable", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventOAPI.Tables.OwnerTable", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("EventOAPI.Tables.UserTable", b =>
                {
                    b.HasOne("EventOAPI.Tables.CommunityTable", null)
                        .WithMany("Members")
                        .HasForeignKey("CommunityTableCommunityId");

                    b.HasOne("EventOAPI.Tables.EventTable", null)
                        .WithMany("Attendees")
                        .HasForeignKey("EventTableEventId");

                    b.HasOne("EventOAPI.Tables.ImageTable", "UserPic")
                        .WithMany()
                        .HasForeignKey("UserPicImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserPic");
                });

            modelBuilder.Entity("EventOAPI.Tables.CommunityTable", b =>
                {
                    b.Navigation("CommunityImages");

                    b.Navigation("Members");
                });

            modelBuilder.Entity("EventOAPI.Tables.EventTable", b =>
                {
                    b.Navigation("Attendees");

                    b.Navigation("EventImages");
                });

            modelBuilder.Entity("EventOAPI.Tables.SpaceTable", b =>
                {
                    b.Navigation("SpaceImages");
                });
#pragma warning restore 612, 618
        }
    }
}
